<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python数值分析之二分法求解]]></title>
    <url>%2F2019%2F04%2F28%2FPython%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E4%B9%8B%E4%BA%8C%E5%88%86%E6%B3%95%E6%B1%82%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[12345678# 内联显示matplotlib输出%matplotlib inline# 导入相关模块import mathimport matplotlibimport numpy as npimport matplotlib.pyplot as pltfrom prettytable import PrettyTable 1234567891011121314151617181920# 绘制f(x)的图像e = math.ex = np.arange(0, 1, 0.01)def f(x): y = e**x + 4*x**3 + 2*x**2 + x - 2 return yplt.figure(facecolor='white',edgecolor='white')plt.xticks(np.arange(min(x), max(x)+1, 0.1))plt.title('$ f(x) = e^x + 4*x^3 + 2*x^2 + x - 2 $')plt.grid(True)plt.plot(x, f(x))plt.show() 2. 二分法求解 f(x)在[0, 1]区间上的根1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980# 二分法求根class FError(Exception): passdef dichotomy(f, interval, error, m): '''二分法求方程根 Args: f: 方程 interval: 有根区间数组 error: 允许的迭代误差 m: 最大迭代次数 Returns: 如果在最大迭代次数内得到了满足要求的根, 则返回该值 Raises: 参数错误,超出最大迭代次数 ''' n = 0 c = 0 x = 0 temp = 0# try: if 2 == len(interval): (a, b) = interval if (a &gt; b): print(f'[&#123;a&#125;, &#123;b&#125;]区间无解') return if f(a)==0: return a if f(b)==0: return b if (f(a)*f(b)&gt;0): print('f(a), f(b)同号') return table = PrettyTable(['迭代次数', 'a', 'b', 'x', 'f(x)']) while (n&lt;m): plt.plot([a, b], [f(a), f(b)]) if (b-a) &lt; error: break # 取a,b中点x x = (a+b)/2 y = f(x) table.add_row([n+1, a, b, x, y]) # 若f(x)=0,返回x if f(x)==0: break # 取函数值异号两项作为新区间 elif (f(x)*f(a)&lt;0): b = x elif (f(x)*f(b)&lt;0): a = x n += 1 print(table)x = np.arange(0, 1, 0.01)plt.figure(facecolor='white',edgecolor='white')plt.xticks(np.arange(min(x), max(x)+1, 0.1))plt.title('$ f(x) = e^x + 4*x^3 + 2*x^2 + x - 2 $')plt.grid(True)plt.plot(x, f(x))dichotomy(f, [0, 1], 10**-4, 20)plt.show() +----------+-----------------+----------------+------------------+------------------------+ | 迭代次数 | a | b | x | f(x) | +----------+-----------------+----------------+------------------+------------------------+ | 1 | 0 | 1 | 0.5 | 1.1487212707001282 | | 2 | 0 | 0.5 | 0.25 | -0.2784745833122586 | | 3 | 0.25 | 0.5 | 0.375 | 0.32217891461820125 | | 4 | 0.25 | 0.375 | 0.3125 | -0.0032792463262036886 | | 5 | 0.3125 | 0.375 | 0.34375 | 0.15277974586321097 | | 6 | 0.3125 | 0.34375 | 0.328125 | 0.07313118351443926 | | 7 | 0.3125 | 0.328125 | 0.3203125 | 0.03452725444645388 | | 8 | 0.3125 | 0.3203125 | 0.31640625 | 0.015525081793443807 | | 9 | 0.3125 | 0.31640625 | 0.314453125 | 0.006098281683223128 | | 10 | 0.3125 | 0.314453125 | 0.3134765625 | 0.0014033704793536828 | | 11 | 0.3125 | 0.3134765625 | 0.31298828125 | -0.0009394732466017075 | | 12 | 0.31298828125 | 0.3134765625 | 0.313232421875 | 0.00023156460100803855 | | 13 | 0.31298828125 | 0.313232421875 | 0.3131103515625 | -0.000354050303566833 | | 14 | 0.3131103515625 | 0.313232421875 | 0.31317138671875 | -6.126684935581217e-05 | +----------+-----------------+----------------+------------------+------------------------+]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python分析比特币价格]]></title>
    <url>%2F2019%2F04%2F28%2FPython%E5%88%86%E6%9E%90%E6%AF%94%E7%89%B9%E5%B8%81%E4%BB%B7%E6%A0%BC%2F</url>
    <content type="text"><![CDATA[Python 分析比特币价格12345678910111213# 导入模块及准备工作from scipy import interpolateimport osimport datetimeimport matplotlib.pyplot as pltimport numpy as npimport pylab as plimport pandas as pdget_ipython().run_line_magic('matplotlib', 'inline')get_ipython().run_line_magic('pylab', 'inline')pylab.rcParams['figure.figsize'] = (15, 9) Populating the interactive namespace from numpy and matplotlib 12345678910start = datetime.datetime(2019, 3, 28)end = datetime.datetime(2019, 4, 27)df = pd.read_csv('BTC-USD2.csv')# data['Adj Close'].plot(grid=True)df['Date'] = pd.to_datetime(df['Date'])df = df.set_index('Date')frag = df['2019-3-28':'2019-4-25']frag['Adj Close'].plot()# plt.plot(frag['Adj Close']) &lt;matplotlib.axes._subplots.AxesSubplot at 0x2d8d0a21828&gt; 12]]></content>
  </entry>
  <entry>
    <title><![CDATA[HTML canvas性能优化]]></title>
    <url>%2F2019%2F04%2F02%2FHTML-canvas%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[离屏 canvas脏矩形渲染多层 canvas]]></content>
  </entry>
  <entry>
    <title><![CDATA[MDN阅读笔记]]></title>
    <url>%2F2019%2F04%2F02%2FMDN%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[MDN Web Doc 新世界的大门Web APIFirefox OScanvas 教程(中文没有在线演示)IndexedDBawait JS Number 合集JS Number MAX/MIN SAFE INTEGER MIN_VALUEJS 浮点 12console.log(Number.MAX_SAFE_INTEGER); //9007199254740991console.log(Number.MIN_SAFE_INTEGER); //-9007199254740991 JS Object 合集apply JS ArrayMDN Array Array.map()map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。 1234567var array1 = [1, 4, 9, 16];// pass a function to mapconst map1 = array1.map(x =&gt; x * 2);console.log(map1);// expected output: Array [2, 8, 18, 32] Freecode Camp 题:Return Largest Numbers in ArraysAnswer当你还在复杂的 for 循环的时候 123456789101112131415function largestOfFour(arr) &#123; var results = []; for (var n = 0; n &lt; arr.length; n++) &#123; var largestNumber = arr[n][0]; for (var sb = 1; sb &lt; arr[n].length; sb++) &#123; if (arr[n][sb] &gt; largestNumber) &#123; largestNumber = arr[n][sb]; &#125; &#125; results[n] = largestNumber; &#125; return results;&#125; 看到这样的骚操作 123function largestOfFour(arr) &#123; return arr.map(Function.apply.bind(Math.max, null));&#125; 大概会惊讶于竟然有如此简单明了的写法而很鄙视自己之前写的代码吧 Web 储存合集Local StorageSession StorageIndexedDBWeb SQLCookies]]></content>
  </entry>
  <entry>
    <title><![CDATA[《说说》 - 仿李宗盛]]></title>
    <url>%2F2019%2F03%2F30%2F%E3%80%8A%E8%AF%B4%E8%AF%B4%E3%80%8B-%E4%BB%BF%E6%9D%8E%E5%AE%97%E7%9B%9B%2F</url>
    <content type="text"><![CDATA[“年轻的时候, 总想去闯荡可岁月它走得太匆忙怀着无人能够理解的倔强慌慌张张的，不知所向早已经受了满身的伤也经历了足够的成长可我在寂寞难耐的夜里依然会无法抑制地彷徨曾经呀魂牵梦萦的姑娘最近你又过得怎么样你是否一如既往地幻想有间童话般可爱的新房我们就像是走了遍过场余生的记忆却如此漫长还是要背上沉重的行囊追寻生命里一丝光亮继续流浪”]]></content>
  </entry>
  <entry>
    <title><![CDATA[Cocos Creator + Socket.io + TypeScript最终版爬坑笔记]]></title>
    <url>%2F2019%2F03%2F22%2FCocos-Creator-Socket-io-TypeScript%E6%9C%80%E7%BB%88%E7%89%88%E7%88%AC%E5%9D%91%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;在做 Cocos Creator H5 联机小游戏的时候, 想用 Socket.io 来进行实时通信, 一阵搜索发现相关资料甚少, 总有人评论让自己封装 Web Socket. 既然有现成的完善的带有心跳和重连机制的 Socket.io, 为什么要自己造前后端的轮子而不把精力放在实现所需功能上呢, 所以写一篇文章来记录一下. 环境开发环境: 操作系统: Win10 Creator 版本: v2.0.9 NodeJS 版本: v10.0.6 Socket.io 版本: v2.2.0 开发语言: TypeScript其他环境请自行尝试 准备工作目录结构: 1234sio └─ sio-client │ └─ sio-server 新建文件夹 sio 作为项目根目录 启动 Cocos Creator, 在项目根目录新建 Hello TypeScript 项目, 命名为 sio-client , 打开工程并初始化 TS 项目. 具体步骤不再赘述, 详见 Cocos Creator 新手入门: 官方文档 TypeScript 项目入门教程: TS 教程 在项目根目录新建文件夹, 命名为 sio-server 并在该文件夹初始化 npm 项目, 安装相关模块. 我的package.json如下, 具体过程不再赘述. 123456789101112131415161718&#123; "name": "sio-server", "version": "1.0.0", "description": "", "main": "index.js", "scripts": &#123; "test": "echo \"Error: no test specified\" &amp;&amp; exit 1" &#125;, "author": "", "license": "ISC", "dependencies": &#123; "koa": "^2.7.0", "socket.io": "^2.2.0" &#125;, "devDependencies": &#123; "debug": "^4.1.1" &#125;&#125; 进入sio-server\node_modules\socket.io-client\dist 目录, 找到 socket.io.js 文件, 把它放入你的 Cocos Creator 工程中. 我这里把它放在了 assets\Script\lib 中 至此, 准备工作完成, 开始写代码 代码服务端我们这里使用 Node.JS 搭建服务端.进入 sio-server 文件夹, 新建 index.js , 写一个基于 Koa2 和 Socket.io 的简易 Web Socket 服务端. 1234567891011121314151617181920212223242526// index.jsvar Koa = require('koa');var app = new Koa();const server = require('http').createServer(app.callback());const io = require('socket.io')(server);io.on('connection', socket =&gt; &#123; // 当用户建立Socket连接时 console.log('user connected'); // 接收消息 socket.on('msg', data =&gt; &#123; console.log(data); &#125;); // 当用户断开连接时 socket.on('disconnect', () =&gt; &#123; console.log('user disconnected'); &#125;);&#125;);// 监听本地3000端口server.listen(3000, () =&gt; &#123; console.log('listening on *:3000');&#125;); 然后在服务端根目录执行 node index 12❯ node indexlistening on *:3000 则服务器搭建成功 Creator 项目我创建的是 TS 项目, 准备阶段已经将 socket.io.js 放进了 Hello TypeScript 项目中, 需要将 Socket.io-client TS 声明(https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/socket.io-client/index.d.ts)下载至 socket.io.js 所在文件夹并重命名为 socket.io.d.ts , 接下来小小地修改一下 HelloWorld.ts 来引用它. 123456789101112131415161718const &#123; ccclass, property &#125; = cc._decorator;import &#123; connect &#125; from './lib/socket.io';@ccclassexport default class Helloworld extends cc.Component &#123; @property(cc.Label) label: cc.Label = null; start() &#123; let self = this; var socket = null; socket = connect('http://localhost:3000'); socket.on('connected', () =&gt; &#123; console.log('Socket connected'); &#125;); &#125;&#125; 运行结果NodeJS 控制台输出 1user connected Web Mobile 输出 1Socket connected]]></content>
  </entry>
  <entry>
    <title><![CDATA[Vue.js + koa2 基于Json Web Token的单点登录实现]]></title>
    <url>%2F2019%2F03%2F22%2FVue-js-koa2-%E5%9F%BA%E4%BA%8EJson-Web-Token%E7%9A%84%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[概述SSO(Single Sign On)单点登录SSO 是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。它包括可以将这次主要的登录映射到其他应用中用于同一个用户的登录的机制。它是目前比较流行的企业业务整合的解决方案之一。 JWT(Json Web Token)一种跨域认证解决方案, 用它来实现 SSO koa2基于 Node.JS 的 Web 开发框架, 由 Express 原班人马基于 ES7 打造, 相比 Express 代码更清晰明了, 性能强劲 准备工作配置之前的文章讲到 Vue+NodeJS 的全栈开发, 最后采用了在根目录 vue.config.js 里添加如下内容 12345678910111213// vue.config.js// ...some other configsmodule.exports = &#123; devServer: &#123; proxy: &#123; '/api': &#123; target: 'http://localhost:3000', pathRewrite: &#123; '^/api': '' &#125; &#125; &#125;&#125; 实现将前端 axios 发送到/api/*的内容转发到开在本地 3000 端口的 NodeJS 服务器. ##]]></content>
  </entry>
  <entry>
    <title><![CDATA[cookie, localStorage, sessionStorage的区别]]></title>
    <url>%2F2019%2F03%2F22%2Fcookie-localStorage-sessionStorage%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[cookie, localStorage, sessionStorage详说 Cookie, LocalStorage 与 SessionStorage 一、浏览器允许每个域名所包含的cookie数： Microsoft指出 InternetExplorer8 增加cookie限制为每个域名 50 个，但 IE7 似乎也允许每个域名 50 个cookie。 Firefox 每个域名 cookie 限制为 50 个。 Opera 每个域名 cookie 限制为 30 个。 Safari/WebKit 貌似没有 cookie 限制。但是如果 cookie 很多，则会使 header 大小超过服务器的处理的限制，会导致错误发生。 注：“每个域名 cookie 限制为 20 个”将不再正确！ 二、当很多的 cookie 被设置，浏览器如何去响应。 除 Safari（可以设置全部 cookie，不管数量多少），有两个方法： 最少最近使用（leastrecentlyused(LRU)）的方法：当 Cookie 已达到限额，自动踢除最老的 Cookie，以使给最新的 Cookie 一些空间。InternetExplorer 和 Opera 使用此方法。 Firefox 很独特：虽然最后的设置的 Cookie 始终保留，但似乎随机决定哪些 cookie 被保留。似乎没有任何计划（建议：在 Firefox 中不要超过 Cookie 限制）。 三、不同浏览器间 cookie 总大小也不同： Firefox 和 Safari 允许 cookie 多达 4097 个字节，包括名（name）、值（value）和等号。 Opera 允许 cookie 多达 4096 个字节，包括：名（name）、值（value）和等号。 InternetExplorer 允许 cookie 多达 4095 个字节，包括：名（name）、值（value）和等号。 注：多字节字符计算为两个字节。在所有浏览器中，任何 cookie 大小超过限制都被忽略，且永远不会被设置。 另！！！WINDOWS所有的文件都会有一个实际大小和储存大小。一般 Cookie 是文本文件，里面也就几行代码，应该只有几十字节(bytes),但是WINDOWS会在缓存盘里把这个文件定义到KB的级别了]]></content>
  </entry>
  <entry>
    <title><![CDATA[Vue.js学习笔记]]></title>
    <url>%2F2019%2F03%2F21%2FVue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[想法经验0. 选择困难症前端三大框架, 各有优劣, 网上各种测评看了好久, 最终决定先拿 vue 下手然后问题又来了, 用什么 UI 框架呢? vux element-ui mint-ui bootstrap-vue …… 最终选择了星星数最多的 vux, 虽然这个框架是个人开发维护的, 也存在很多问题. 1. vue-cli3 与 vux 的融合vux 官方暂时还没有适配 vue-cli3vue-cli3 可以用 vue-cli-plugin-vux 一键安装 vux UI 框架, 不需要手动适配 vue-loader 12npm i vue-cli-plugin-vuxvue add vux 2. 初始化项目的注意事项可以通过命令行输入vue ui打开图形化界面也可以vue create `project-name`直接在命令行创建两种方式的效果是一样的, 看你习惯用哪种 12345678910 Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)(*) Babel //转码器, 将ES6+转换成ES5以适配更多浏览器( ) TypeScript //根据情况自选( ) Progressive Web App (PWA) Support //根据情况自选(*) Router //前端路由, 选上(*) Vuex //全局状态管理, 选上(*) CSS Pre-processors //CSS预处理器, 选上( ) Linter / Formatter //如果已经在编辑器里安装了ESLint, Prettier等插件的话就不用选, 会冲突( ) Unit Testing //单元测试, 暂时没用上( ) E2E Testing //暂时没用上 回车之后就进入了进一步的配置.Use history mode for router?默认 Y, 链接里就不会出现/#/一路回车即可. 3. VSCode 对 Webpack Alias 路径的支持(‘@/‘), 只需在项目根目录中添加 jsconfig.json 文件, 内容如下:123456789101112//jsconfig.json&#123; "compilerOptions": &#123; "baseUrl": ".", "paths": &#123; "@/*": ["./src/*"] &#125; &#125;, "include": ["./src/**/*"], "exclude": ["node_modules"]&#125; 4. Vue.js + Node.js(koa2)集成开发开发全栈项目, 登录组件拼凑完成以后, 前端开发告一段落, 是时候写一点后端接口了. 目前没有找到比修改 proxy 更优雅的解决方案. 另一种方法参考:【新手向】Vue.js + Node.js(koa) 合体指南 点子https://github.com/wangdahoo/vonichttp://ghbtns.com/#star]]></content>
  </entry>
  <entry>
    <title><![CDATA[Cocos Creator类似iPhone的滑动以解锁]]></title>
    <url>%2F2018%2F12%2F21%2FCocos-Creator%E6%BB%91%E5%8A%A8%E4%BB%A5%E8%A7%A3%E9%94%81%2F</url>
    <content type="text"><![CDATA[Creator 版本: v2.1.0 平台: 模拟器 语言: Typescript 今天突然想做一个类似 iPhone 的滑动以解锁. 首先想到使用 Creator 自带的 cc.Slider 组件, 在 Slide 事件中获取 Slider 的 progress, 遇到了问题: 如果 handle 设置的比较大会发现在进度条最左端或最右端会出现 handle 挪出了背景框 解决方案: 将 Slider 的 background 向左右加长 点击在 cc.Slider 的进度条上会使 handle 移动, 然而我们并不需要这种效果 解决方案: (不推荐) 123start() &#123; cc.eventManager.pauseTarget(sliderNode);&#125; (推荐) 123start() &#123; this.node.targetOff(sliderNode);&#125; 因为 Slider 的有些事件可能是注册在 onLoad 后, 所以我们把取消 Slider 监听的函数写在 start 中来避免一些未知错误 没有滑到最右端时 Slider 的回弹 最近正好在琢磨 Physics 组件的玩法, 所以想到一个骚操作就是用 Joint 将 Slider 和 handle 连接起来, 不过后来还是用一个简单的 action 解决了 12var springBack = cc.moveTo(0.1, cc.v2(-this.node.width / 2, 0));this.silderHandle.node.runAction(springBack); 对滑到最右端松手的处理 如果只是简单地检测 handle 的 touchend 事件, 如果手指滑出了 handle 就无法触发了, 所以同时还要检测 handle 的 touchcancel 事件(当手指滑出 handle 节点的范围时触发), 详细代码在下方给出 整体代码如下:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/* slider.js */const &#123; ccclass, property &#125; = cc._decorator;@ccclassexport default class Slider extends cc.Component &#123; @property(cc.Slider) slider: cc.Slider = null; @property(cc.Button) silderHandle: cc.Button = null; onLoad() &#123; this.slider = this.node.getComponent(cc.Slider); // get slider component this.slider.progress = 0; // set slider progress to 0 this.silderHandle = this.slider.handle; // get handle of the slider this.silderHandle.node.on( cc.Node.EventType.TOUCH_END, function(event) &#123; this.callback(event); &#125;, this ); // trigger when touch ended on handle this.silderHandle.node.on( cc.Node.EventType.TOUCH_CANCEL, function(event) &#123; this.callback(event); &#125;, this ); // trigger when touch ended and moved out of handle &#125; callback(event) &#123; cc.log(this.slider.progress); if (this.slider.progress == 1) &#123; cc.director.loadScene('next'); &#125; else &#123; // this.slider.progress = 0; var springBack = cc.moveTo(0.1, cc.v2(-this.node.width / 2, 0)); this.silderHandle.node.runAction(springBack); // handle spring back to initial position &#125; console.log(event); &#125; start() &#123; this.node.targetOff(this.slider); // prevent slider touch event &#125; // update (dt) &#123;&#125;&#125; 将代码绑定到 Slider 所在节点进行微调即可实现滑动以解锁的效果.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Cocos Creator学习笔记]]></title>
    <url>%2F2018%2F12%2F04%2Ftest%2F</url>
    <content type="text"><![CDATA[经过了一个月的学习,总算对 Cocos Creator 有了初步的认识,学习过程中碰到了许多坑,记录一下,实时更新]]></content>
  </entry>
  <entry>
    <title><![CDATA[双屏]]></title>
    <url>%2F2018%2F05%2F21%2F2018-05-21-%E5%8F%8C%E5%B1%8F%2F</url>
    <content type="text"><![CDATA[很久之前就想组多屏来提高工(you)作(xi)效(ti)率(yan)，终于趁着 520 某宝降价又入了块 Dell U2417H 组双屏。就目前的使用效果来看，确实能够有效预防颈椎病，还没有提高写代码效率的感觉，等用过一段时间之后继续更。]]></content>
  </entry>
  <entry>
    <title><![CDATA[分享]]></title>
    <url>%2F2018%2F05%2F14%2F2018-05-14-%E6%88%91%2F</url>
    <content type="text"><![CDATA[就爱瞎折腾1NSLog(@"Test");]]></content>
  </entry>
</search>
